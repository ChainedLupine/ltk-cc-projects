--[[

turtlelib is a series of routines for managing a turtle.  Mostly, it's a 
wrapper around the build-in turtle API.

Comes in three categories:

inv 		-- Manages a turtle's inventory
fuel 		-- Manages a turtle's fuel supply
movement	-- High-level control code for moving a turtle

requires: commonlib

]]


VERSION = "1.0.2"

-- ** START OF CONFIG

-- Min fuel amt when refuel will occur
MINFUEL = 80

-- Outgoing channels to turtles
CHANNEL_MIN = 10000
CHANNEL_MAX = 11000
-- Reply channels to computers
CHANNEL_REPLY_MIN = 12000
CHANNEL_REPLY_MAX = 13000

-- ** END OF CONFIG

-- Hard-coded Normal turtle fuel limit as of CC 1.7, if > then advanced turtle
NORMAL_TURTLE_FUEL_LIMIT = 20000

debug = {}
inv = {} 
movement = {}
fuel = {}

isAdvanced = function()
	local ver = commonlib.getOSVersion()
	if ver[1] >= 1 and ver[2] >= 6 then
		return turtle.getFuelLimit() > NORMAL_TURTLE_FUEL_LIMIT
	else
		return false
	end
end

getInfo = function ()
	data = {}
	data.type = isAdvanced() and "Advanced" or "Normal"
	data.fuel = turtle.getFuelLevel()
	
	data.x = movement.pos.x
	data.y = movement.pos.y
	data.z = movement.pos.z
	data.dirX = movement.dir.x
	data.dirY = movement.dir.y
	data.dirZ = movement.dir.z
	return data
end

inv.isSlotHoldingFuel = function (slot)
	turtle.select (slot)
	return turtle.refuel (0)
end

inv.getNextOccupiedItemSlot = function (currSlot)
	if currSlot < 2 then currSlot = 2 end
	if currSlot > 16 then currSlot = 2 end

	repeat
		if turtle.getItemCount (currSlot) > 0 then
			return currSlot
		end
		currSlot = currSlot + 1
	until currSlot > 16
	return -1
end

inv.isInvFull = function (ignoreFuel)
	local slots = {}

	ignoreFuel = (ignoreFuel == nil) and true or ignoreFuel

	if ignoreFuel then
		slots = inv.getSlotsWithoutFuel (localinv)
	else
		for i = 1, 16 do table.insert (slots, i) end
	end

	local full = true

	for i = 1, #slots do
		if turtle.getItemSpace (slots[i]) > 0 then
			full = false
			break
		end
	end

	return full
end

inv.areSlotsFull = function ()
	local full = true

	for i = 1, 16 do
		if turtle.getItemCount(i) == 0 then
			full = false
			break
		end
	end

	return full
end

inv.dropAll = function(skipFirstSlotIfFuel, skipAnyFuel)
	skipFirstSlotIfFuel = (skipFirstSlotIfFuel == nil) and false or skipFirstSlotIfFuel
	skipAnyFuel = (skipAnyFuel == nil) and false or skipAnyFuel

	for i = 1, 16 do
		local skip = false

		if (skipFirstSlotIfFuel and i == 1) or skipAnyFuel then
			if inv.isSlotHoldingFuel(i) then
				skip = true
			end
		end

		if not skip then
			turtle.select (i)
			turtle.drop()
		end
	end
end

-- returns array of slots with fuel
inv.getSlotsWithFuel = function()
	local fuelslots = {}

	for i = 1, 16 do
		if inv.isSlotHoldingFuel(i) then
			table.insert (fuelslots, i)
		end
	end

	return fuelslots
end

inv.getSlotsWithoutFuel = function()
	local nonfuelslots = {}

	for i = 1, 16 do
		if not inv.isSlotHoldingFuel(i) then
			table.insert (nonfuelslots, i)
		end
	end

	return nonfuelslots
end

fuel.refuel = function (slots, refuelAmt)
	refuelAmt = refuelAmt or 1

	if slots == nil then
		slots = {}
		for i = 1, 16 do table.insert (slots, i) end
	end

	local total = 0

	for i = 1, #slots do
		--debug.dump (sinfo)
		turtle.select (slots[i])
		local amt = turtle.getItemCount (slots[i])
		if amt > refuelAmt then
			amt = refuelAmt
		end

		if turtle.refuel(amt) then
			total = total + amt
			break
		end
	end

	return total
end


-- check fuel level, if low then refuel
fuel.check = function (firstSlotOnly, refuelAmt)
	firstSlotOnly = (firstSlotOnly == nil) and true or firstSlotOnly
	refuelAmt = refuelAmt or 1

	-- first see if we need to
	if turtle.getFuelLevel() == 
		"unlimited" then
		return "ok", "Inf fuel."
	end

	if turtle.getFuelLevel() < MINFUEL then

		local amt = 0

		if firstSlotOnly then
			turtle.select (1)
			if turtle.refuel(refuelAmt) then
				amt = refuelAmt
			end
		else
			local fslots = inv.getSlotsWithFuel()
			--print (textutils.serialize (fslots))

			amt = fuel.refuel (fslots, refuelAmt)
		end

		if amt == 0 then
			if turtle.getFuelLevel() < 1 then
				return "error", "No fuel in inv!"
			elseif turtle.getFuelLevel() < 10 then
				return "warning", "Low, no fuel in inv!"
			end
		else
			return "fueled", "Refueled " ..
				amt .. " units."
		end

	end

	return "ok", "No fuel needed."

end

movement.clear = function()
	-- note that this is RELATIVE and has no bearing on MC world coords or orientation
	movement.pos = vector.new (0, 0, 0)
	movement.dir = vector.new (1, 0, 0)
end

movement.clear()

movement.turnLeft = function ()
	local ok = turtle.turnLeft()
	if ok then
		movement.dir = commonlib.m.rotateAroundZ (movement.dir, math.rad (90))
	end
	return ok
end

movement.turnRight = function ()
	local ok = turtle.turnRight()
	if ok then
		movement.dir = commonlib.m.rotateAroundZ (movement.dir, math.rad (-90))
	end
	return ok
end

movement.moveForward = function (destroy, onDig)
	destroy = (destroy == nil) and true or destroy

	if not destroy then
		if turtle.detect() then
			return false, "Block in front."
		end
	end

	-- try to destroy
	if destroy then
		if turtle.detect() then
			if not turtle.dig() then
				return false, "Could not dig block in front."
			else
				if onDig then
					onDig()
				end				
			end
		end
	end

	if not turtle.forward() then
		return false, "Could not move forward."
	end

	movement.pos = movement.pos + movement.dir
	--print (movement.pos)

	return true, "Moved forward."

end

movement.moveUp = function (destroy, onDig)
	destroy = (destroy == nil) and true or destroy

	if not destroy then
		if turtle.detectUp() then
			return false, "Block above."
		end
	end

	-- try to destroy
	if destroy then
		if turtle.detectUp() then
			if not turtle.digUp() then
				return false, "Could not dig block above."
			else
				if onDig then
					onDig()
				end
			end
		end
	end

	if not turtle.up() then
		return false, "Could not move up."
	end

	movement.pos = movement.pos + vector.new (0, 0, 1)

	return true, "Moved up."

end

movement.moveDown = function (destroy, onDig)
	destroy = (destroy == nil) and true or destroy

	if not destroy then
		if turtle.detectDown() then
			return false, "Block below."
		end
	end

	-- try to destroy
	if destroy then
		if turtle.detectDown() then
			if not turtle.digDown() then
				return false, "Could not dig block below."
			else
				if onDig then
					onDig()
				end
			end
		end
	end

	if not turtle.down() then
		return false, "Could not move down."
	end

	movement.pos = movement.pos + vector.new (0, 0, -1)

	return true, "Moved down."

end

